#!/usr/bin/env perl
use FindBin '$RealBin';
use lib "$RealBin/tools";

use lib 'lib';

use Util::Feat;
use Util::Phrase;
use Util::Spell;
use Util::Text qw/ indent def_push def_join /;
use Mojo::DOM;
use Mojo::Pg;
use Mojo::Util qw/ html_unescape dumper /;
use Mojolicious::Lite;
use Scalar::Util 'refaddr';
use Text::Markdown qw/ markdown /;

plugin CHI => { default => { driver => 'Memory', global => 1, max_size => '20m' } };
plugin 'Config';
plugin 'TagHelpers';

my $pg = Mojo::Pg->new('postgresql:///pathfinder');
my $feat_db = Util::Feat->new(pg => $pg);
my $spell_db = Util::Spell->new(pg => $pg);
my $phrase_db = Util::Phrase->new(pg => $pg);

get '/' => sub {
  my $c = shift;
  $c->render(template => 'index');
};

get '/feats/*feat' => sub { shift->render(template => 'feat'); };
any '/feats' => sub { shift->check_cache(feats => sub { shift->render_to_string(template => 'feats'); }); };
get '/spells/*spell' => sub { shift->render(template => 'spell'); };
any '/spells' => sub { shift->check_cache(spells => sub { shift->render_to_string(template => 'spells'); }); };
get '/edit/spell/:id' => sub { shift->render(template => 'edit-spell'); };

helper check_cache => sub {
	my ($c, $key, $cb) = @_;

	return $c->render(data => $cb->($c)) if @{ $c->req->params() };

	# Else we need to check the cache
	my $cache = $c->chi->get($key);

	if (not defined $cache) {
		$cache = $cb->($c);
		$c->chi->set($key => $cache, '30 min');
	}

	return $c->render(data => $cache);
	
};

helper get_feat_list => sub {
	my ($c, $search, $filter) = @_;

	my ($sorted, @results) = $feat_db->find($search, $filter);

	my $last = '';
	my @jumps;
	my @feats = map {
		my @return = { name => $_->{display}, url => sprintf("/feats/%s", $_->{name}), };
		if ($sorted) {
			my $cur = substr $_->{name}, 0, 1;
			if ($cur ne $last) {
				$last = $cur;
				push @jumps, $cur;
				unshift @return, { jump => $cur };
			}
		}
		@return; } @results;

	return {jumps => \@jumps, list => \@feats};
};

helper list_spells => sub {
	my ($c, $search, $filter) = @_;

	my ($sorted, @results) = $spell_db->find($search, $filter);

	my $last = '';
	my @jumps;

	my @spells = map {
		my ($url, $name, $desc) = ( sprintf("/spells/%s", $_->{name}), $_->{name}, $_->{short_description} // '' );
		my @return;
		if ($sorted) {
			my $cur = substr $_->{name}, 0, 1;
			$cur = $_->{level} if defined $_->{level};
			if ($cur ne $last) {
				$last = $cur;
				push @jumps, $cur;
				push @return, { jump => $cur };
			}
		} else {
			$name = sprintf "%s (%s %s)", $name, $filter->{class}, $_->{level} if defined $_->{level};
		}
		push @return, { content => sprintf(qq'<li>%s - %s\n', $c->link_to($name => $url), $desc) };
		@return;
	} @results;

	return {jumps => \@jumps, list => \@spells};
};

helper get_feat => sub {
	my ($c, $feat) = @_;
	my $desc = $feat_db->get_desc($feat);

	return indent 6, $desc;
};

helper render_feat => sub {
	my ($c, $name) = @_;

	return join '<p>', map { $c->render_feat_desc($_) } $feat_db->get_feats(split /\|/, $name);
};

helper render_spell => sub {
	my ($c, $name) = @_;

	return join '<p>', map { $c->render_spell_desc($_) } $spell_db->get_spells($name);
};

helper render_spell_desc => sub {
	my ($c, $spell) = @_;

	# Source
	my @lines = sprintf '<p><i>Source: %s</i></p>', $spell->{source};
	def_push @lines, $spell->{short_description};

	# Name
	my @descriptors =
		map { s/(?:^|[^a-z])\K([a-z])/\u$1/g; s/_/-/gr; }
		grep { $_ eq 'mythic' ? !defined $spell->{mythic_text} : 1 }
		grep { $spell->{$_} }
		$spell_db->descriptors();
	my $descriptors = @descriptors ? sprintf(" [%s]", join ", ", @descriptors) : '';
	push @lines, sprintf '<h2>%s%s</h2>', $spell->{name}, $descriptors;

	# School
	my @school = $spell->{school};
	def_push @school, ' (', $spell->{subschool}, ')';
	push @lines, join '', '<b>School:</b> ', @school;

	# Classes
	push @lines, join " / ", map { sprintf "%s %s", "\u$_->{class}", $_->{level} } $spell_db->get_classes($spell->{id});

	# Casting block
	my @casting;
	def_push @casting, def_join ' ', '<b>Casting time:</b>', $spell->{casting_time};
	def_push @casting, def_join ' ', '<b>Components:</b>', $spell->{components};
	def_push @casting, def_join ' ', '<b>Material costs:</b>', $spell->{material_costs};
	def_push @casting, def_join ' ', '<b>Range:</b>', $spell->{range};
	def_push @casting, def_join ' ', '<b>Area:</b>', $spell->{area};
	def_push @casting, def_join ' ', '<b>Effect:</b>', $spell->{effect};
	def_push @casting, def_join ' ', '<b>Targets:</b>', $spell->{targets};
	def_push @casting, def_join ' ', '<b>Duration:</b>', $spell->{duration};
	def_push @casting, def_join ' ', '<b>Saving Throw:</b>', $spell->{saving_throw};
	def_push @casting, def_join ' ', '<b>Spell Resistance:</b>', $spell->{spell_resistance};
	def_push @casting, def_join ' ', '<b>Deity:</b>', $spell->{deity};
	def_push @casting, def_join ' ', '<b>Domain:</b>', $spell->{domain};
	def_push @casting, def_join ' ', '<b>Bloodline:</b>', $spell->{bloodline};
	def_push @casting, def_join ' ', '<b>Patron:</b>', $spell->{patron};
	push @lines, join "<br>\n", @casting, '' if @casting;

	# Description
	def_push @lines, def_join ' ', '<b>Description:</b>', $c->md($spell->{description});

	# Mythic block
	my @mythic;
	def_push @mythic, def_join ' ', '<b>Mythic:</b>', $spell->{mythic_text};
	push @mythic, sprintf('<b>%s:</b> %s', split /: ?/,  $spell->{augmented}, 2) if defined $spell->{augmented};
	push @lines, join '<br>\n', @mythic if @mythic;

	return indent 6, sprintf '<div class="spell"><div class="editlink"><a href="/edit/spell/%s">Edit</a></div>%s</div>',
		$spell->{id}, join "\n", map { @{ Mojo::DOM->new($_)->child_nodes } != 1 ? "<p>$_</p>" : $_ } @lines;
};

helper render_feat_desc => sub {
	my ($c, $feat) = @_;

	# Source
	my @lines = sprintf '<p><i>Source: %s</i></p>', $feat->{source};

	# Name
	my @types = $feat_db->get_types($feat->{id});
	my $types = @types ? sprintf(' (%s)', join ', ', @types) : '';
	push @lines, sprintf '<h2>%s%s</h2>', $feat->{name}, $types;

	# Description
	push @lines, $feat->{description};

	# Details
	def_push @lines, def_join ' ', '<b>Prerequisites:</b>', $c->feat_prereq_linkify($feat);
	def_push @lines, def_join ' ', '<b>Benefit:</b>', $c->md($feat->{benefit});
	def_push @lines, def_join ' ', '<b>Normal:</b>', $c->md($feat->{normal});
	def_push @lines, def_join ' ', '<b>Special:</b>', $c->md($feat->{special});
	def_push @lines, def_join ' ', '<b>Goal:</b>', $c->md($feat->{goal});
	def_push @lines, def_join ' ', '<b>Completion Benefit:</b>', $c->md($feat->{completion_benefit});
	def_push @lines, def_join ' ', '<b>Note:</b>', $c->md($feat->{note});
	def_push @lines, def_join ' ', '<b>Suggested Traits:</b>', $feat->{suggested_traits};

	# Dependent feats
	my @dependents = $feat_db->list_dependents($feat->{id});
	if (@dependents) {
		push @lines, sprintf '<div class="dependents list"><p><b>Feats depending on this:</b><ul>%s</ul></p></div>',
			join "\n",
			map { sprintf '<li><a href="/feats/%s">%1$s (%s)</a>', $_->{name}, join ", ", @{ $_->{types} } }
			@dependents;
	}

	return sprintf '<div class="feat">%s</div>', join "\n",  map { @{ Mojo::DOM->new($_)->child_nodes } != 1 ? "<p>$_</p>" : $_ } @lines;
};

helper md => sub {
	my ($c, $text) = @_;
	return undef if not defined $text;

	foreach my $phrase ($phrase_db->analyse($text)) {
		my ($phr, $lnk) = @{ $phrase }{'phrase', 'link'};

		my $dom = Mojo::DOM->new($text);
		foreach my $node (@{ $dom->child_nodes }) {
			next if $node->type ne 'text';

			my $txt = html_unescape $node->to_string();
			$txt =~ s!\b(\Q$phr\E)\b!<a href="$lnk">$1</a>!gi;
			$node->replace($txt);
		}
		$text = html_unescape $dom->content();
	}

	return Mojo::DOM->new(markdown( $text , { empty_element_suffix => '>', }))->child_nodes->first->content();
};

helper feat_prereq_linkify => sub {
	my ($c, $feat) = @_;
	return undef if not defined $feat->{prerequisites};

	my @prereqs = $feat_db->list_prereqs($feat->{id});

	my $prereqs = $feat->{prerequisites};
	foreach my $prereq (@prereqs) {
		$prereqs =~ s!(?:^|, | or )\K(\Q$prereq\E)!<a href="/feats/$prereq">$1</a>!ig;
	}

	return $prereqs;
};

helper get_feat_types => sub {
	my ($c) = @_;

	my @types = ({ name => 'Remove Filter', url => $c->url_with->query([type => undef]) }, map { +{ name => $_, url => $c->url_with->query([type => $_])->to_string } }
		@{ $pg->db->query('SELECT name FROM feat_types ORDER BY name;')->hashes()->map(sub { $_->{name} }) });
	return { header => 'Filter by Type', collapsable => 'type', jumps => [], list => \@types };
};

helper get_feat_sources => sub {
	my ($c) = @_;
	
	my @sources = ({ name => 'Remove Filter', url => $c->url_with->query([source => undef]) }, map { +{ name => $_, url => $c->url_with->query([source => $_])->to_string } }
		@{ $pg->db->query('SELECT source FROM feats GROUP BY source ORDER BY source;')->hashes()->map(sub { $_->{source} }) });
	return { header => 'Filter by Source', collapsable => 'source', jumps => [], list => \@sources };
};

helper list_spell_classes => sub {
	my ($c) = @_;

	my @classes = ({ name => 'Remove Filter', url => $c->url_with->query([class => undef]) }, map { +{ name => "\u$_", url => $c->url_with->query([class => $_])->to_string} }
		@{ $pg->db->query('SELECT class FROM spells_rel_class GROUP BY class ORDER BY class')->hashes()->map(sub { $_->{class} }) });
	return { header => 'Filter by Class', collapsable => 'class', jumps => [], list => \@classes };
};

helper list_spell_sources => sub {
	my ($c) = @_;

	my @sources = ({ name => 'Remove Filter', url => $c->url_with->query([source => undef]) }, map { +{ name => $_, url => $c->url_with->query([source => $_])->to_string }  }
		@{ $pg->db->query('SELECT source FROM spells GROUP BY source ORDER BY source;')->hashes()->map(sub { $_->{source} }) });
	return { header => 'Filter by Source', collapsable => 'source', jumps => [], list => \@sources };
};

helper list_spell_descriptors => sub {
	my ($c) = @_;

	my @descriptors = ({ name => 'Remove Filter', url => $c->url_with->query([descriptor => undef]) },
		map { +{ name => "\u$_" =~ s/_(.)/-\u$1/r, url => $c->url_with->query([descriptor => $_])->to_string } }
		$spell_db->descriptors());
	return { header => 'Filter by Descriptor', collapsable => 'descriptor', jumps => [], list => \@descriptors };
};

helper list_spell_schools => sub {
	my ($c) = @_;

	my @schools = ({name => 'Remove Filter', url => $c->url_with->query([school => undef])},
		map { +{ name => "\u$_", url => $c->url_with->query([school => $_])->to_string } }
		$spell_db->schools());
	return { header => 'Filter by School', collapsable => 'school', jumps => [], list => \@schools };
};

helper render_list => sub {
	my $c = shift;
	my $cb = shift;

	my $spec = $c->$cb(@_);

	my $collapsable = $spec->{collapsable};
	my $header = $spec->{header};
	my @jumps = @{ $spec->{jumps} };
	my $single_jump = @jumps == 1;
	my $jump_html = '';
	if (@jumps > 1) {
		$jump_html .= '<a name="jump">Jump to</a>: ' . join " | ", map { sprintf '<a href="#%1$s">%1$s</a>', $_; } @jumps;
	}

	my @list = @{ $spec->{list} };
	my $list_html = '';
	foreach my $item (@list) {
		if (exists $item->{jump}) {
			next if $single_jump;
			if (length $list_html) { $list_html .= '</ul>'; }
			$list_html .= sprintf '<h3 class="jump"><a name="%1$s">%1$s</a></h3><a href="#jump" class="jump">^Top</a>', $item->{jump};
			$list_html .= '<ul>';
		} elsif (exists $item->{url}) {
			if (not length $list_html) { $list_html .= '<ul>'; }
			$list_html .= sprintf '<li><a href="%s">%s</a>%s', $item->{url}, $item->{name}, "\n";
		} elsif (exists $item->{content}) {
			$list_html .= $item->{content};
		} else {
			$list_html .= join "<br>\n", map { "$_ => " . $item->{$_} } sort keys %{ $item };
		}
	}
	if (length $list_html) { $list_html .= '</ul>'; }

	my $html = '';
	if (length $jump_html) { $html .= sprintf '<div class="jump">%s</div>', $jump_html; }
	if (length $list_html) { $html .= sprintf '<div class="list">%s</div>', $list_html; }
	if ($collapsable)      { $html = sprintf '
<input class="toggle" type="checkbox" id="toggle-%s">
<div class="collapsable">
  <div class="fader">
    <div class="blocker">
      <label for="toggle-%1$s" class="toggle">%s</label>
    </div>
  </div>
  %s
</div>', $collapsable, $header // 'Toggle', $html; }

	return $html;
};

app->secrets(app->config->{secrets});
app->start;
__DATA__

@@ index.html.ep
% layout 'base';
% title 'Games';
<h1>Games</h1>

